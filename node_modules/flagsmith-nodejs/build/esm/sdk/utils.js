export function isTraitConfig(traitValue) {
    return !!traitValue && typeof traitValue == 'object' && traitValue.value !== undefined;
}
export function generateIdentitiesData(identifier, traits, transient) {
    const traitsGenerated = Object.entries(traits).map(([key, value]) => {
        if (isTraitConfig(value)) {
            return {
                trait_key: key,
                trait_value: value?.value,
                transient: value?.transient
            };
        }
        else {
            return {
                trait_key: key,
                trait_value: value
            };
        }
    });
    if (transient) {
        return {
            identifier: identifier,
            traits: traitsGenerated,
            transient: true
        };
    }
    return {
        identifier: identifier,
        traits: traitsGenerated
    };
}
export const delay = (ms) => new Promise(resolve => setTimeout(() => resolve(undefined), ms));
export const retryFetch = (url, 
// built-in RequestInit type doesn't have dispatcher/agent
fetchOptions, retries = 3, timeoutMs = 10, // set an overall timeout for this function
retryDelayMs = 1000, customFetch) => {
    const retryWrapper = async (n) => {
        try {
            return await customFetch(url, {
                ...fetchOptions,
                signal: AbortSignal.timeout(timeoutMs)
            });
        }
        catch (e) {
            if (n > 0) {
                await delay(retryDelayMs);
                return await retryWrapper(n - 1);
            }
            else {
                throw e;
            }
        }
    };
    return retryWrapper(retries);
};
/**
 * A deferred promise can be resolved or rejected outside its creation scope.
 *
 * @template T The type of the value that the deferred promise will resolve to.
 *
 * @example
 * const deferred = new Deferred<string>()
 *
 * // Pass the promise somewhere
 * performAsyncOperation(deferred.promise)
 *
 * // Resolve it when ready from anywhere
 * deferred.resolve("Operation completed")
 * deferred.failed("Error")
 */
export class Deferred {
    promise;
    resolvePromise;
    rejectPromise;
    constructor(initial) {
        this.promise = new Promise((resolve, reject) => {
            this.resolvePromise = resolve;
            this.rejectPromise = reject;
        });
    }
    resolve(value) {
        this.resolvePromise(value);
    }
    reject(reason) {
        this.rejectPromise(reason);
    }
}
